/*
 * #%L
 * ontop-obdalib-core
 * %%
 * Copyright (C) 2009 - 2014 Free University of Bozen-Bolzano
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

/*
    This grammar is adapted from https://github.com/antlr/grammars-v4/tree/master/turtle,
    derived in turn from http://www.w3.org/TR/turtle/#sec-grammar-grammar,
    with the following copywright:
*/
/*
 [The "BSD licence"]
 Copyright (c) 2014, Alejandro Medrano (@ Universidad Politecnica de Madrid, http://www.upm.es/)
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
*/



grammar TurtleOBDA;

 /*
 Source files (Parser, Visitor, ...) are generated by the ANTLR4 Maven Plugin,
 during the Maven generate-sources phase.
 If src/main/<subPath>/TurtleOBDA.g4 is the path to this file,
 then the source files are generated in target/generated-sources/antlr4/<subPath>
 */
//options {
//  superClass = AbstractTurtleOBDAParser ;
//}

@header {
import it.unibz.inf.ontop.model.term.*;
import static it.unibz.inf.ontop.model.OntopModelSingletons.TERM_FACTORY;
}



/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/

parse
  : directiveStatement* triplesStatement+ EOF
  ;

directiveStatement
  : directive '.'
  ;

triplesStatement
  : triples '.'
  ;

directive
  : base
  | prefixID
  ;

//base
//  : AT BASE_KW uriref
//  ;

prefixID
  : ('@prefix' | '@PREFIX') PNAME_NS iriref
  ;

base
  : ('@base' | '@BASE') iriref
  ;

//prefix
//  : ('_'? NAME_SBS)? ':'
//  ;

triples
  : subject  predicateObjectList
  ;

predicateObjectList
  : predicateObject (';' predicateObject)*
  ;

predicateObject
  : verb objectList
  ;

objectList
  : object (',' object)*
  ;

verb
  : resource
  | 'a'
  ;

subject
  : resource
  | variable
  | blank
  ;

object
  : resource
//  | BlankNode
  | literal
  | typedLiteral
  | variable
  ;

resource
  : iriref
  | prefixedName
  ;

iriref // unnecessary in the grammar, but used for code generation
  : IRIREF
  ;

blank
  : BLANK_NODE_LABEL
  | ANON
  ;

prefixedName // unnecessary in the grammar, but used for code generation
  : PREFIXEDNAME
  ;

//blank
//  : BLANK_PREFIX NAME_SBS
//  | BLANK
//  ;

variable
  : STRING_WITH_CURLY_BRACKET
  ;

function
  : resource '(' terms ')'
  ;

typedLiteral
  : variable languageTag        # typedLiteral_1
  | variable '^^' resource      # typedLiteral_2
  ;

languageTag
  : LANGTAG | '@' variable
  ;

terms
  : term (',' term)*
  ;

term
  : function
  | variable
  | literal
  ;

literal
  : stringLiteral (languageTag)?
  | dataTypeString
  | numericLiteral
  | booleanLiteral
  ;

dataTypeString
  :  stringLiteral '^^' resource
  ;

stringLiteral
  : STRING_LITERAL_QUOTE
//  : STRING_WITH_QUOTE_DOUBLE
  ;
numericLiteral
  : numericUnsigned
  | numericPositive
  | numericNegative
  ;

booleanLiteral
  : BOOLEAN_LITERAL
  ;

numericUnsigned
  : INTEGER | DOUBLE | DECIMAL
  ;

numericPositive
  : INTEGER_POSITIVE | DOUBLE_POSITIVE | DECIMAL_POSITIVE
  ;

numericNegative
  : INTEGER_NEGATIVE | DOUBLE_NEGATIVE  | DECIMAL_NEGATIVE
  ;

WS
  : ([\t\r\n\u000C] | ' ') + -> skip
  ;
/*------------------------------------------------------------------
 * LEXER RULES
 Applied for tokenization (before parsing), regardless of parser rules, as follows:
 - The rule matching the longest substring is applied
 - If there are several, the first of them is applied
 *------------------------------------------------------------------*/

//fragment ALPHA
//  : 'a'..'z'
//  | 'A'..'Z'
//  | '\u00C0'..'\u00D6'
//  | '\u00D8'..'\u00F6'
//  | '\u00F8'..'\u02FF'
//  | '\u0370'..'\u037D'
//  | '\u037F'..'\u1FFF'
//  | '\u200C'..'\u200D'
//  | '\u2070'..'\u218F'
//  | '\u2C00'..'\u2FEF'
//  | '\u3001'..'\uD7FF'
//  | '\uF900'..'\uFDCF'
//  | '\uFDF0'..'\uFFFD'
//  ;

//fragment DIGIT
//  : [0-9]
//  ;

//fragment ALPHANUM
//  : ALPHA
//  | DIGIT
//  ;

//fragment NAME_CHAR: (ALPHANUM|'_'|'-'|'.'|'#'|'?'|'/'|'%'|'=');

//WS: (' '|'\t'|'\n'|'\r\n'|'\b'|'\f')+ -> channel(HIDDEN);

//STRING_WITH_CURLY_BRACKET // No lexer ref allowed in complement
//  : '{'  ( ~(' '|'\t'|'\n'|'\r'|'\b'|'\f' | '\'' | '"' | '\\') )+? '}'
//  ;

//BASE_KW: ('B'|'b')('A'|'a')('S'|'s')('E'|'e');
//
//PREFIX_KW: ('P'|'p')('R'|'r')('E'|'e')('F'|'f')('I'|'i')('X'|'x');

//FALSE: ('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e');

//TRUE: ('T'|'t')('R'|'r')('U'|'u')('E'|'e');

//NAME_SBS
//  : (NAME_CHAR | '{' | '}')+;

//INTEGER
//  : DIGIT+
//  ;
//
//DOUBLE
//  : DIGIT+ '.' DIGIT* ('e'|'E') ('-'|'+')? DIGIT*
//  | '.' DIGIT+ ('e'|'E') ('-'|'+')? DIGIT*
//  | DIGIT+ ('e'|'E') ('-'|'+')? DIGIT*
//  ;
//
//DECIMAL
//  : DIGIT+ '.' DIGIT+
//  | '.' DIGIT+
//  ;


//LANGUAGE_TAG
//    : '@' [a-zA-Z] + ('-' [a-zA-Z0-9] +)*
//    ;

//STRING_WITH_QUOTE_DOUBLE // No lexer ref allowed in complement
//  : QUOTE_DOUBLE  ( ~(' '|'\t'|'\n'|'\r'|'\b'|'\f' | '\'' | '"' | '\\') )+ QUOTE_DOUBLE
//  ;


//URI_REF // No lexer ref allowed in complement
//  : '<'  ( ~(' '|'\t'|'\n'|'\r'|'\b'|'\f' | '\'' | '"' | '\\') )+? '>'
//  ;

//REFERENCE:     '^^';
////SEMI:          ';';
//PERIOD:        '.';
////COMMA:         ',';
//LSQ_BRACKET:   '[';
//RSQ_BRACKET:   ']';
//LCR_BRACKET:   '{';
//RCR_BRACKET:   '}';
//LPAREN:        '(';
//RPAREN:        ')';
////QUESTION:      '?';
//QUOTE_DOUBLE:  '"';
//QUOTE_SINGLE:  '\'';
//UNDERSCORE:    '_';
//MINUS:         '-';
//AT:            '@';
////HASH:          '#';
////PERCENT:       '%';
//PLUS:          '+';
////EQUALS:        '=';
//COLON:         ':';
//LESS:          '<';
//GREATER:       '>';
//BLANK:	       '[]';
//BLANK_PREFIX:  '_:';
////SLASH:         '/';

STRING_WITH_CURLY_BRACKET
  : '{' (PN_CHARS | '.' | ':' | '/' | '\\' | '#' | '%' | '&' | UCHAR)*? '}'
  ;

BOOLEAN_LITERAL
  : 'true' | 'TRUE' | 'True' | 'false'| 'FALSE'| 'False'
  ;


//IRIREF	        :	'<' (~(['\u0000'..'\u0020']|'<'|'>'|'"'|'{'|'}'|'|'|'^'|'`'|'\\') | UCHAR)* '>'; /* \u00=NULL #01-\u1F=control codes \u20=space */

//
IRIREF
  : '<' (STRING_WITH_CURLY_BRACKET | (PN_CHARS | '.' | ':' | '/' | '\\' | '#' | '@' | '%' | '&' | UCHAR)*) '>'
  ;

PNAME_NS
  : PN_PREFIX? ':'
  ;

PN_PREFIX
  : PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  ;

PREFIXEDNAME
   : PNAME_LN | PNAME_NS
   ;

PNAME_LN
   : PNAME_NS PN_LOCAL
   ;

BLANK_NODE_LABEL
  : '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  ;

LANGTAG
  : '@' [a-zA-Z] + ('-' [a-zA-Z0-9] +)*
  ;

INTEGER
  : [0-9] +
  ;

DECIMAL
  : [0-9]* '.' [0-9] +
  ;

DOUBLE
  : ([0-9] + '.' [0-9]* EXPONENT | '.' [0-9] + EXPONENT | [0-9] + EXPONENT)
  ;

EXPONENT
  : [eE] [+-]? [0-9] +
  ;

INTEGER_POSITIVE
  : '+' INTEGER
  ;

INTEGER_NEGATIVE
  : '-' INTEGER
  ;

DOUBLE_POSITIVE
  : '+' DOUBLE
  ;

DOUBLE_NEGATIVE
  : '-' DOUBLE
  ;

DECIMAL_POSITIVE
  : '+' DECIMAL
  ;

DECIMAL_NEGATIVE
  : '-' DECIMAL
  ;

// not used
STRING_LITERAL_LONG_SINGLE_QUOTE
  : '\'\'\'' (('\'' | '\'\'')? ([^'\\] | ECHAR | UCHAR | '"'))* '\'\'\''
  ;

// not used
STRING_LITERAL_LONG_QUOTE
  : '"""' (('"' | '""')? (~ ["\\] | ECHAR | UCHAR | '\''))* '"""'
  ;

// Extended with curly brackets, space and escaped characters
STRING_LITERAL_QUOTE
  : '"' (~ ["\\\r\n] | '\'' | '\\"' | '{' | '}' | ' ' | ECHAR)* '"'
  ;

//STRING_LITERAL_QUOTE
//  : '"' (~ ["\\\r\n] | '\'' | '\\"')* '"'
//  ;

// not used
STRING_LITERAL_SINGLE_QUOTE
  : '\'' (~ [\u0027\u005C\u000A\u000D] | ECHAR | UCHAR | '"')* '\''
  ;

UCHAR
  : '\\u' HEX HEX HEX HEX | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
  ;

ECHAR
  : '\\' [tbnrf"'\\]
  ;

ANON_WS
  : ' ' | '\t' | '\r' | '\n'
  ;

ANON
  : '[' ANON_WS* ']'
  ;

PN_CHARS_BASE
  : 'A' .. 'Z' | 'a' .. 'z' | '\u00C0' .. '\u00D6' | '\u00D8' .. '\u00F6' | '\u00F8' .. '\u02FF' | '\u0370' .. '\u037D' | '\u037F' .. '\u1FFF' | '\u200C' .. '\u200D' | '\u2070' .. '\u218F' | '\u2C00' .. '\u2FEF' | '\u3001' .. '\uD7FF' | '\uF900' .. '\uFDCF' | '\uFDF0' .. '\uFFFD'
  ;

PN_CHARS_U
  : PN_CHARS_BASE | '_'
  ;

// Extended to allow curly brackets
PN_CHARS
  : PN_CHARS_U | '-' | [0-9] | '\u00B7' | [\u0300-\u036F] | [\u203F-\u2040] | '{' | '}'
  ;

//Extended to allow slash and initial curly bracket
PN_LOCAL
  : (PN_CHARS_U | ':' | '{' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | '/' | PLX )* (PN_CHARS | ':' | '/' | PLX ))?
  ;

PLX
  : PERCENT | PN_LOCAL_ESC
  ;

PERCENT
  : '%' HEX HEX
  ;

HEX
  : [0-9] | [A-F] | [a-f]
  ;

PN_LOCAL_ESC
  : '\\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
  ;
